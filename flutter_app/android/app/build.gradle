plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'com.google.firebase.crashlytics'
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id 'dev.flutter.flutter-gradle-plugin'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

//def flutterRoot = localProperties.getProperty('flutter.sdk')
//if (flutterRoot == null) {
//    throw GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
//}
//
//def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
//if (flutterVersionCode == null) {
//    flutterVersionCode = '1'
//}
//
//def flutterVersionName = localProperties.getProperty('flutter.versionName')
//if (flutterVersionName == null) {
//    flutterVersionName = '1.0'
//}

//apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.exotel.voice_sample"
    compileSdkVersion 35
    ndkVersion "26.1.10909125"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        applicationId 'com.exotel.voice_sample'
        minSdk 21
        targetSdk 35
        versionCode flutter.versionCode
        versionName flutter.versionName
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists() && keystoreProperties['storeFile'] != null) {
                // Load signing configs from the key.properties file
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            // Only use release signing if keystore properties are available
            if (keystorePropertiesFile.exists() && keystoreProperties['storeFile'] != null) {
                signingConfig signingConfigs.release
            } else {
                // Use debug signing as fallback
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.squareup.okhttp3:okhttp:[3.14.2,)'
    implementation 'com.squareup.okhttp3:logging-interceptor:[3.14.2,)'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation 'com.google.code.gson:gson:[2.8.5]'
    implementation 'com.google.firebase:firebase-crashlytics:18.6.0'
    implementation 'com.google.firebase:firebase-analytics:21.5.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
    
}
